<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>Atea.Windows.Server.Monitoring</ID>
      <Version>1.0.3.259</Version>
    </Identity>
    <Name>Atea.Windows.Server.Monitoring</Name>
    <References>
      <Reference Alias="MSDL">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="Atea.Windows.Server.Monitoring.MonitoredEvent" Base="Windows!Microsoft.Windows.ApplicationComponent" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
          <Property ID="EventMonitorName" Key="true" Type="string" MaxLength="50" />
          <Property ID="ErrorEventId" Key="false" Type="int" MinValue="0" MaxValue="65535" Comment="EventId of event that trips a fault state" />
          <Property ID="ErrorEventLevel" Key="false" Type="int" MinValue="0" MaxValue="5" Comment="1=Error, 2=Warning, 3=Information, 4=AuditSuccess, 5=AuditFailure: Event Level of event that trips a fault state" />
          <Property ID="ErrorEventSource" Key="false" Type="string" MaxLength="254" Comment="Event Source of event that trips a fault state" />
          <Property ID="ErrorEventLog" Key="false" Type="string" MaxLength="254" Comment="Event Logname of event that trips a fault state" />
          <Property ID="HealthyEventId" Key="false" Type="int" MinValue="0" MaxValue="65535" Comment="EventId of event that trips an OK state" />
          <Property ID="HealthyEventLevel" Key="false" Type="int" MinValue="0" MaxValue="5" Comment="1=Error, 2=Warning, 3=Information, 4=AuditSuccess, 5=AuditFailure: EventLevel of event that trips an OK state" />
          <Property ID="HealthyEventSource" Key="false" Type="string" MaxLength="254" Comment="Event Source of event that trips an OK state" />
          <Property ID="HealthyEventLog" Key="false" Type="string" MaxLength="254" Comment="Event Logname of event that trips an OK state" />
          <Property ID="ShortDescription" Key="false" Type="string" MaxLength="512" Comment="Short description of events, will be included in alert." />
        </ClassType>
        <ClassType ID="Atea.Windows.Server.Monitoring.MonitoredEventSeed" Base="Windows!Microsoft.Windows.LocalApplication" Accessibility="Internal" Abstract="false" Hosted="true" Singleton="false"></ClassType>
      </ClassTypes>
      <RelationshipTypes>
        <RelationshipType ID="Atea.Windows.Server.Monitoring.ComputerHostsMonitoredEvent" Base="System!System.Hosting" Abstract="false" Accessibility="Internal">
          <Source ID="Source" Type="Windows!Microsoft.Windows.Computer" />
          <Target ID="Target" Type="Atea.Windows.Server.Monitoring.MonitoredEvent" />
        </RelationshipType>
      </RelationshipTypes>
    </EntityTypes>
    <ModuleTypes>
      <ProbeActionModuleType ID="Atea.Windows.Server.Monitoring.MonitoredEvent.AddMonitoredEventTask.PSProbe" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="EventMonitorName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorEventId" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorEventLevel" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorEventSource" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorEventLog" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="HealthyEventId" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="HealthyEventLevel" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="HealthyEventSource" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="HealthyEventLog" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ShortDescription" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="EventMonitorName" Selector="$Config/EventMonitorName$" ParameterType="string" />
          <OverrideableParameter ID="ErrorEventId" Selector="$Config/ErrorEventId$" ParameterType="int" />
          <OverrideableParameter ID="ErrorEventLevel" Selector="$Config/ErrorEventLevel$" ParameterType="int" />
          <OverrideableParameter ID="ErrorEventSource" Selector="$Config/ErrorEventSource$" ParameterType="string" />
          <OverrideableParameter ID="ErrorEventLog" Selector="$Config/ErrorEventLog$" ParameterType="string" />
          <OverrideableParameter ID="HealthyEventId" Selector="$Config/HealthyEventId$" ParameterType="int" />
          <OverrideableParameter ID="HealthyEventLevel" Selector="$Config/HealthyEventLevel$" ParameterType="int" />
          <OverrideableParameter ID="HealthyEventSource" Selector="$Config/HealthyEventSource$" ParameterType="string" />
          <OverrideableParameter ID="HealthyEventLog" Selector="$Config/HealthyEventLog$" ParameterType="string" />
          <OverrideableParameter ID="ShortDescription" Selector="$Config/ShortDescription$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="PSProbe" TypeID="Windows!Microsoft.Windows.PowerShellProbe">
                <ScriptName>Add-MonitoredWindowsEventKey.ps1</ScriptName>
                <ScriptBody><![CDATA[param(
	[Parameter(Mandatory = 'true')][string] $eventMonitorName,
	[Parameter(Mandatory = 'true')][string] $shortDescription,
	[Parameter(Mandatory = 'true')][int] $errorEventId,
	[Parameter(Mandatory = 'true')][int] $errorEventLevel,
	[Parameter(Mandatory = 'true')][string] $errorEventSource,
	[Parameter(Mandatory = 'true')][string] $errorEventLog,
	[Parameter(Mandatory = 'true')][int] $healthyEventId,
	[Parameter(Mandatory = 'true')][int] $healthyEventLevel,
	[Parameter(Mandatory = 'true')][string] $healthyEventSource,
	[Parameter(Mandatory = 'true')][string] $healthyEventLog
)

[string] $registryPath = "HKLM:\SOFTWARE\CommunityMP\WinEvents"
[string] $monitorRegistryPath = "$registryPath\$EventMonitorName"

if (!(Test-Path $monitorRegistryPath)) {
	Write-Output ("{0} does not exist, will create key." -f $monitorRegistryPath)
	New-Item $monitorRegistryPath -Force
	New-ItemProperty -Path $monitorRegistryPath -Name "ErrorEventId" -Value $errorEventId -PropertyType DWord -Force
	New-ItemProperty -Path $monitorRegistryPath -Name "ErrorEventLevel" -Value $errorEventLevel -PropertyType DWord -Force
	New-ItemProperty -Path $monitorRegistryPath -Name "ErrorEventSource"  -Value $errorEventSource -PropertyType String -Force
	New-ItemProperty -Path $monitorRegistryPath -Name "ErrorEventLog"  -Value $errorEventLog -PropertyType String -Force
	New-ItemProperty -Path $monitorRegistryPath -Name "HealthyEventId"  -Value $healthyEventId -PropertyType DWord -Force
	New-ItemProperty -Path $monitorRegistryPath -Name "HealthyEventLevel"  -Value $healthyEventLevel -PropertyType DWord -Force
	New-ItemProperty -Path $monitorRegistryPath -Name "HealthyEventSource"  -Value $healthyEventSource -PropertyType String -Force
	New-ItemProperty -Path $monitorRegistryPath -Name "HealthyEventLog"  -Value $healthyEventLog -PropertyType String -Force
	New-ItemProperty -Path $monitorRegistryPath -Name "EventShortDescription"  -Value $shortDescription -PropertyType String -Force

	Write-Output "`nNew service key added`n`nPlease wait for next discovery, `nor restart the Microsoft Monitoring agent to force a discovery."
} else {
	Write-Output "`nKey already exists!`n`nLeaving as is."
}
]]></ScriptBody>
                <SnapIns />
                <Parameters>
                  <Parameter>
                    <Name>eventMonitorName</Name>
                    <Value>$Config/EventMonitorName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>errorEventId</Name>
                    <Value>$Config/ErrorEventId$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>errorEventLevel</Name>
                    <Value>$Config/ErrorEventLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>errorEventSource</Name>
                    <Value>$Config/ErrorEventSource$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>errorEventLog</Name>
                    <Value>$Config/ErrorEventLog$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>healthyEventId</Name>
                    <Value>$Config/HealthyEventId$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>healthyEventLevel</Name>
                    <Value>$Config/HealthyEventLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>healthyEventSource</Name>
                    <Value>$Config/HealthyEventSource$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>healthyEventLog</Name>
                    <Value>$Config/HealthyEventLog$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>shortDescription</Name>
                    <Value>$Config/ShortDescription$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>true</StrictErrorHandling>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSProbe" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="Atea.Windows.Server.Monitoring.MonitoredEventDiscovery" Target="Atea.Windows.Server.Monitoring.MonitoredEventSeed" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent">
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="EventMonitorName" />
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="ErrorEventId" />
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="ErrorEventLevel" />
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="ErrorEventSource" />
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="ErrorEventLog" />
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="HealthyEventId" />
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="HealthyEventLevel" />
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="HealthyEventSource" />
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="HealthyEventLog" />
            <Property TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent" PropertyID="ShortDescription" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="Atea.Windows.Server.Monitoring.ComputerHostsMonitoredEvent" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>Get-MonitoredEventDiscoveryDS.ps1</ScriptName>
          <ScriptBody><![CDATA[param($computerName)
<### Gather vars and modules before script execution
$startVars = (Get-Variable -Scope Global).Name
$startModules = Get-Module
###>

[string] $registryPath = "HKLM:\SOFTWARE\CommunityMP\WinEvents"

$knownDebugHosts = "Visual Studio Code Host","Windows PowerShell ISE Host"
$scriptHost = (Get-Host).Name
if ($scriptHost -in $knownDebugHosts) {
	# script is running in a known debug environment, set debug values
	$sourceId = '{172B8F37-C292-F5DF-B486-30CC30866928}' #dummy value for debugging
	$targetId = '{5EEDD73A-F918-8A67-E63D-53C15FE4E4A3}' #dummy value for debugging
	$isDebugging = $true
}
else {
	$sourceId = '$MPElement$'
	$targetId = '$Target/Id$'
	$isDebugging = false
}


$omApi = New-Object -ComObject "MOM.ScriptAPI"
if ($isDebugging) {
	if ((Get-WmiObject win32_computersystem).Domain -ne "WORKGROUP") {
		$computerName = "$((Get-WmiObject win32_computersystem).DNSHostName).$((Get-WmiObject win32_computersystem).Domain)"
	}
	else {
		$computerName = "$((Get-WmiObject win32_computersystem).DNSHostName)"
	}
}

[int] $eventCount = 0
[string] $eventList = ""
$discoData = $omApi.CreateDiscoveryData(0, $sourceId, $targetId)

if (Test-Path -Path $registryPath) {
	$subKeys = Get-ChildItem -Path $registryPath
	foreach ($subKey in $subKeys) {
        if ($subKey.PSChildName.Length -gt 50) {
            $EventMonitorName = $subKey.PSChildName.Substring(0,49)
        } else {
            $EventMonitorName = $subKey.PSChildName
        }
		$discoInstance = $discoData.CreateClassInstance("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']$")
		$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/EventMonitorName$", $EventMonitorName)
		$discoInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $subKey.PSChildName)
		$discoInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
		foreach ($itemProperties in (Get-ItemProperty -Path $subKey.PSPath)) {
			$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/ErrorEventId$", $itemProperties.ErrorEventId)
			$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/ErrorEventLevel$", $itemProperties.ErrorEventLevel)
			$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/ErrorEventLog$", $itemProperties.ErrorEventLog)
			$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/ErrorEventSource$", $itemProperties.ErrorEventSource)
			$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/HealthyEventId$", $itemProperties.HealthyEventId)
			$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/HealthyEventLevel$", $itemProperties.HealthyEventLevel)
			$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/HealthyEventLog$", $itemProperties.HealthyEventLog)
			$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/HealthyEventSource$", $itemProperties.HealthyEventSource)
			$discoInstance.AddProperty("$MPElement[Name='Atea.Windows.Server.Monitoring.MonitoredEvent']/ShortDescription$", $itemProperties.EventShortDescription)
		}
		$discoData.AddInstance($discoInstance)
		$eventCount++
        $eventList += "`n`t$($subKey.PSChildName)"
	}
}

# Return discovery data to workflow...
if ($isDebugging) {
	# or console/file, if we're debugging
	$omAPI.AddItem($discoData)
	$omAPI.ReturnItems()
}
else {
	$discoData
}

$omApi.LogScriptEvent("Get-MonitoredEventDiscoveryDS.ps1", 6110, 0, "Ran eventlog discovery, found $($eventCount) events to monitor.`n$($eventList)`n`nSourceId: $sourceId`nTargetId: $targetId`nPrincipalName: $computerName`nDebug: $($isDebugging)")


<### Unload generated vars and modules
foreach ($module in (Get-Module)) {
	if ($module -notin $startModules) {
		Remove-Module $module
	}
}
foreach ($var in (Get-Variable -Scope Global).Name) {
	if ($var -notin $startVars) {
		Remove-Variable $var -ErrorAction SilentlyContinue
	}
}
###>

]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>computerName</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="Atea.Windows.Server.Monitoring.MonitoredEventSeedDiscovery" Target="Windows!Microsoft.Windows.OperatingSystem" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Atea.Windows.Server.Monitoring.MonitoredEventSeed" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.FilteredRegistryDiscoveryProvider">
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <RegistryAttributeDefinitions>
            <RegistryAttributeDefinition>
              <AttributeName>SeedExists</AttributeName>
              <Path>SOFTWARE\CommunityMP\WinEvents</Path>
              <PathType>0</PathType>
              <AttributeType>0</AttributeType>
            </RegistryAttributeDefinition>
          </RegistryAttributeDefinitions>
          <Frequency>3600</Frequency>
          <ClassId>$MPElement[Name="Atea.Windows.Server.Monitoring.MonitoredEventSeed"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>WinEvents: $Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetbiosComputerName$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Values/SeedExists</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">true</Value>
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="Atea.Windows.Server.Monitoring.DiskUsageGB" Target="Windows!Microsoft.Windows.LogicalDisk" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedScript.PerformanceProvider">
            <IntervalSeconds>14400</IntervalSeconds>
            <SyncTime />
            <ScriptName>DiskUsageProbe.vbs</ScriptName>
            <Arguments>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</Arguments>
            <ScriptBody><![CDATA[On Error Resume Next
CONST GB = 1073741824
 
Dim oAPI, oBag
Set oAPI = CreateObject("MOM.ScriptAPI")
Set oArgs = WScript.Arguments
drive = oArgs(0)
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\cimv2")
 
Set colLogicalDisk = objWMIService.ExecQuery("Select * from Win32_LogicalDisk Where DeviceID= '" & drive & "'")
 
For each objLogicalDisk in colLogicalDisk
diskUsedGB = ((objLogicalDisk.size - objLogicalDisk.freespace)/GB)
Next
 
Set oBag = oAPI.CreatePropertyBag()
Call oBag.AddValue("DiskUsed",diskUsedGB)
Call oAPI.Return(oBag)]]></ScriptBody>
            <TimeoutSeconds>300</TimeoutSeconds>
            <ObjectName>LogicalDisk</ObjectName>
            <CounterName>DiskUsedGB</CounterName>
            <InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName>
            <Value>$Data/Property[@Name='DiskUsed']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Atea.Windows.Server.Monitoring.MonitoredEvent.AddMonitoredEventTask" Accessibility="Public" Target="Windows!Microsoft.Windows.Computer" Enabled="true" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <ProbeAction ID="Probe" TypeID="Atea.Windows.Server.Monitoring.MonitoredEvent.AddMonitoredEventTask.PSProbe">
          <EventMonitorName>CHANGEME</EventMonitorName>
          <ErrorEventId>0</ErrorEventId>
          <ErrorEventLevel>0</ErrorEventLevel>
          <ErrorEventSource>CHANGEME</ErrorEventSource>
          <ErrorEventLog>CHANGEME</ErrorEventLog>
          <HealthyEventId>0</HealthyEventId>
          <HealthyEventLevel>0</HealthyEventLevel>
          <HealthyEventSource>CHANGEME</HealthyEventSource>
          <HealthyEventLog>CHANGEME</HealthyEventLog>
          <ShortDescription>CHANGEME</ShortDescription>
          <TimeoutSeconds>300</TimeoutSeconds>
        </ProbeAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="Atea.Windows.Server.Monitoring.EventMonitor" Accessibility="Internal" Enabled="true" Target="Atea.Windows.Server.Monitoring.MonitoredEvent" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.2SingleEventLog2StateMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Atea.Windows.Server.Monitoring.EventMonitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Property[Type="System!System.Entity"]/DisplayName$</AlertParameter1>
            <AlertParameter2>$Target/Property[Type="Atea.Windows.Server.Monitoring.MonitoredEvent"]/ShortDescription$</AlertParameter2>
            <AlertParameter3>$Data/Context/EventSourceName$</AlertParameter3>
            <AlertParameter4>$Data/Context/EventDisplayNumber$</AlertParameter4>
            <AlertParameter5>$Data/Context/EventCategory$</AlertParameter5>
            <AlertParameter6>$Data/Context/UserName$</AlertParameter6>
            <AlertParameter7>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter7>
            <AlertParameter8>$Data/Context/EventDescription$</AlertParameter8>
            <AlertParameter9>$Data/Context/@time$</AlertParameter9>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="FirstEventRaised" MonitorTypeStateID="FirstEventRaised" HealthState="Error" />
          <OperationalState ID="SecondEventRaised" MonitorTypeStateID="SecondEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <FirstComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</FirstComputerName>
          <FirstLogName>$Target/Property[Type="Atea.Windows.Server.Monitoring.MonitoredEvent"]/ErrorEventLog$</FirstLogName>
          <FirstExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">$Target/Property[Type="Atea.Windows.Server.Monitoring.MonitoredEvent"]/ErrorEventId$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Integer">EventLevel</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="Integer">$Target/Property[Type="Atea.Windows.Server.Monitoring.MonitoredEvent"]/ErrorEventLevel$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Target/Property[Type="Atea.Windows.Server.Monitoring.MonitoredEvent"]/ErrorEventSource$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </FirstExpression>
          <SecondComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</SecondComputerName>
          <SecondLogName>$Target/Property[Type="Atea.Windows.Server.Monitoring.MonitoredEvent"]/HealthyEventLog$</SecondLogName>
          <SecondExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">$Target/Property[Type="Atea.Windows.Server.Monitoring.MonitoredEvent"]/HealthyEventId$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Integer">EventLevel</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="Integer">$Target/Property[Type="Atea.Windows.Server.Monitoring.MonitoredEvent"]/HealthyEventLevel$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Target/Property[Type="Atea.Windows.Server.Monitoring.MonitoredEvent"]/HealthyEventSource$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </SecondExpression>
        </Configuration>
      </UnitMonitor>
      <DependencyMonitor ID="Atea.Windows.Server.Monitoring.MonitoredEventRollup" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="Atea.Windows.Server.Monitoring.ComputerHostsMonitoredEvent" MemberMonitor="Atea.Windows.Server.Monitoring.EventMonitor">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Atea.Windows.Server.Monitoring.EventMonitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEventDiscovery">
          <Name>Monitored Event Discovery</Name>
          <Description>Discover "MonitoredEvent" instances based on registry information. </Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEventSeedDiscovery">
          <Name>Monitored Event Seed Discovery</Name>
          <Description>Registry-based discovery to find Monitored Event Seeds.</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEventRollup">
          <Name>Monitored Event Rollup</Name>
          <Description>Health rollup from monitored event to computer. </Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.EventMonitor">
          <Name>Event Monitor</Name>
          <Description>Monitors for events according to registry configuration of "MonitoredEvent".</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.EventMonitor.AlertMessage">
          <Name>{0} Error Event Triggered!</Name>
          <Description>{0}:
{1}

Source: {2}
Event ID: {3}
Event Category: {4}
User: {5}
Computer: {6}
Event Description: 
{7}

At time {8}</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.EventMonitor" SubElementID="FirstEventRaised">
          <Name>ErrorEvent</Name>
          <Description>ErrorEvent</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.EventMonitor" SubElementID="SecondEventRaised">
          <Name>HealthyEvent</Name>
          <Description>HealthyEvent</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.DiskUsageGB">
          <Name>Disk Usage (GB)</Name>
          <Description>Collects the server Disk Usage in GB</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent.AddMonitoredEventTask">
          <Name>Add Monitored EventLog</Name>
          <Description>Use this task to add a monitored eventlog event on this computer. Use overrides to set the friendly name, eventId, eventLevel et.c.</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring">
          <Name>Atea Windows Server Monitoring</Name>
          <Description>Extends the core monitoring of Windows Servers.</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent">
          <Name>Monitored Event Class</Name>
          <Description>This class represents monitored Windows Eventlog Events defined in Registry for self-service and automation.</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="EventMonitorName">
          <Name>Event Monitor-Name</Name>
          <Description>Registry-key name, and displayname, of the defined monitored event.</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="ErrorEventId">
          <Name>ErrorEventId</Name>
          <Description>EventId of event that trips a fault state</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="ErrorEventLevel">
          <Name>Error Event Level</Name>
          <Description>1=Error, 2=Warning, 3=Information, 4=AuditSuccess, 5=AuditFailure
Event Level of event that trips a fault state</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="ErrorEventSource">
          <Name>ErrorEventSource</Name>
          <Description>Event Source of event that trips a fault state</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="ErrorEventLog">
          <Name>ErrorEventLog</Name>
          <Description>Event Logname of event that trips a fault state</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="HealthyEventId">
          <Name>HealthyEventId</Name>
          <Description>EventId of event that trips an OK state</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="HealthyEventLevel">
          <Name>Healthy Event Level</Name>
          <Description>
            1=Error, 2=Warning, 3=Information, 4=AuditSuccess, 5=AuditFailure
Event Level of event that trips an OK state
          </Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="HealthyEventSource">
          <Name>HealthyEventSource</Name>
          <Description>Event Source of event that trips an OK state</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="HealthyEventLog">
          <Name>HealthyEventLog</Name>
          <Description>Event Logname of event that trips an OK state</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEvent" SubElementID="ShortDescription">
          <Name>ShortDescription</Name>
          <Description>Short description of events, will be included in alert.</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.MonitoredEventSeed">
          <Name>Monitored Event Seed-Class</Name>
          <Description>Used to pre-stage the powershell script-based discovery of registry-configured monitored events.</Description>
        </DisplayString>
        <DisplayString ElementID="Atea.Windows.Server.Monitoring.ComputerHostsMonitoredEvent">
          <Name>Atea Windows Computer Hosts Monitored Event Relationship</Name>
          <Description></Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles></KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>